---
- name: Create group
  group:
    name: "{{ pretix_group }}"
    state: present

- name: Create user
  user:
    name: "{{ pretix_user }}"
    group: "{{ pretix_group }}"
    create_home: yes
    home: "{{ pretix_base_path }}"
    shell: "/bin/bash"

- name: Create required directories
  file:
    path: "{{ item }}"
    owner: "{{ pretix_user }}"
    group: "{{ pretix_group }}"
    state: directory
  loop:
    - "{{ pretix_pretix_datadir }}/media"
    - "{{ pretix_pretix_datadir }}/logs"
    - "{{ pretix_config_path }}"

- name: Upload pretix config
  template:
    src: "pretix.cfg.j2"
    dest: "{{ pretix_config_path }}/pretix.cfg"
    owner: "{{ pretix_user }}"
    group: "{{ pretix_group }}"
    mode: 0600

- name: Install required packages
  apt:
    name:
      - git
      - build-essential
      - python3
      - python3-venv
      - python3-pip
      - python3-dev
      - libxml2-dev
      - libxslt1-dev
      - libffi-dev
      - zlib1g-dev
      - libssl-dev
      - gettext
      - libpq-dev
      - libmariadbclient-dev
      - libjpeg-dev
      - libopenjp2-7-dev

- name: Create venv directory
  file:
    path: "{{ pretix_venv_path }}"
    owner: "{{ pretix_user }}"
    group: "{{ pretix_group }}"
    state: directory

- name: Ensure pip ison the latest version
  pip:
    name: "pip"
    state: "latest"
    virtualenv: "{{ pretix_venv_path }}"
    virtualenv_command: "{{ pretix_venv_command }}"
  become: true
  become_user: "{{ pretix_user }}"


- name: Install gunicorn in virtualenv
  pip:
    name: "gunicorn"
    virtualenv: "{{ pretix_venv_path }}"
    virtualenv_command: "{{ pretix_venv_command }}"
  become: yes
  become_user: "{{ pretix_user }}"

- name: Install pretix with mysql support in virtualenv
  pip:
    name: "pretix[mysql]"
    version: "{{ pretix_version }}"
    virtualenv: "{{ pretix_venv_path }}"
    virtualenv_command: "{{ pretix_venv_command }}"
  become: yes
  become_user: "{{ pretix_user }}"
  notify:
    - Run database migration
    - Run static file compilation
  when: pretix_database_backend == "mysql"

- name: Install pretix with postgresql support in virtualenv
  pip:
    name: "pretix[postgres]"
    version: "{{ pretix_version }}"
    virtualenv: "{{ pretix_venv_path }}"
    virtualenv_command: "{{ pretix_venv_command }}"
  become: yes
  become_user: "{{ pretix_user }}"
  notify:
    - Run database migration
    - Run static file compilation
  when: pretix_database_backend == "postgresql"

- name: Install pretix without mysql or postgresql support in virtualenv
  pip:
    name: "pretix[postgres]"
    version: "{{ pretix_version }}"
    virtualenv: "{{ pretix_venv_path }}"
    virtualenv_command: "{{ pretix_venv_command }}"
  become: yes
  become_user: "{{ pretix_user }}"
  notify:
    - Run database migration
    - Run static file compilation
  when: pretix_database_backend != "mysql" and pretix_database_backend != "postgresql"

- meta: flush_handlers

- name: Upload web systemd service file
  template:
    src: "web.service.j2"
    dest: "/etc/systemd/system/{{ pretix_systemd_service_web_name }}.service"
  notify: Restart web systemd service

- name: Enable/Start web systemd service
  systemd:
    name: "{{ pretix_systemd_service_web_name }}.service"
    daemon_reload: yes
    enabled: yes
    state: started

- name: Upload worker systemd service file
  template:
    src: "worker.service.j2"
    dest: "/etc/systemd/system/{{ pretix_systemd_service_worker_name }}.service"
  notify: Restart worker systemd service

- name: Enable/Start worker systemd service
  systemd:
    name: "{{ pretix_systemd_service_worker_name }}.service"
    daemon_reload: yes
    enabled: yes
    state: started

- name: Create cronjob to run
  cron:
    name: "{{ pretix_pretix_instance_name }}: Management command runperiodic"
    minute: "{{ pretix_cron_minute }}"
    hour: "*"
    user: "{{ pretix_user }}"
    job: "export PATH=/var/pretix/venv/bin:$PATH && cd /var/pretix && python -m pretix runperiodic"
